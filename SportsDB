/* Building a database to manage the booking process of a sports complex */

create database sports_booking;
show databases;
use sports_booking;

/* "members" table creation */
CREATE TABLE members (
    id VARCHAR(255) PRIMARY KEY,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    member_since TIMESTAMP NOT NULL DEFAULT NOW(),
    payment_due FLOAT NOT NULL DEFAULT 0
);
show tables;
describe members;

/* "pending_terminations" table creation */
CREATE TABLE pending_terminations (
    id VARCHAR(255) PRIMARY KEY,
    email VARCHAR(255) NOT NULL,
    payment_due FLOAT NOT NULL DEFAULT 0,
    request_date TIMESTAMP NOT NULL DEFAULT NOW()
);

describe pending_terminations;

/* "rooms" table creation */
CREATE TABLE rooms (
    id VARCHAR(255) PRIMARY KEY,
    room_type VARCHAR(255) NOT NULL,
    price DECIMAL(10 , 2) NOT NULL
);

describe rooms;

/* "bookings" table creation*/
CREATE TABLE bookings (
    id INT AUTO_INCREMENT PRIMARY KEY,
    room_id VARCHAR(255) NOT NULL,
    booked_date DATE NOT NULL,
    member_id VARCHAR(255) NOT NULL,
    datetime_of_booking TIMESTAMP NOT NULL DEFAULT NOW(),
    payment_status VARCHAR(255) NOT NULL DEFAULT 'Unpaid',
    constraint uc1 unique (room_id, booked_date, datetime_of_booking)
);

alter table bookings add constraint fk1 foreign key (member_id) references members(id) on update cascade on delete cascade;
alter table bookings add constraint fk2 foreign key (room_id) references rooms(id) on update cascade on delete cascade;

alter table bookings add column booked_time time not null after booked_date;


/* insert values into "members" table */
insert into members values
('afeil', 'feil1988<3', 'Abdul.Feil@hotmail.com', '2017-04-15 12:10:13', 0),
('amely_18', 'loseweightin18', 'Amely.Bauch91@yahoo.com', '2018-02-06 16:48:43', 0),
('bbahringer', 'iambeau17', 'Beaulah_Bahringer@yahoo.com', '2017-12-28 05:36:50', 0),
('little31', 'whocares31', 'Anthony_Little31@gmail.com', '2017-06-01 21:12:11', 10),
('macejkovic73', 'jadajeda12', 'Jada.Macejkovic73@gmail.com', '2017-05-30 17:30:22', 0),
('marvin1', 'if0909mar', 'Marvin_Schulist@gmail.com', '2017-09-09 02:30:49', 10),
('nitzsche77', 'bret77@#', 'Bret_Nitzsche77@gmail.com', '2018-01-09 17:36:49', 0),
('noah51', '18Oct1976#51', 'Noah51@gmail.com', '2017-12-16 22:59:46', 0),
('oreillys', 'reallycool#1', 'Martine_OReilly@yahoo.com', '2017-10-12 05:39:20', 0),
('wyattgreat', 'wyatt111', 'Wyatt_Wisozk2@gmail.com', '2017-07-18 16:28:35', 0);

/* insert values into "rooms" table */
insert into rooms values
('AR', 'Archery Range', 120),
('B1', 'Badminton Court', 8), 
('B2', 'Badminton Court', 8), 
('MPF1', 'Multi Purpose Field', 50), 
('MPF2', 'Multi Purpose Field', 60), 
('T1', 'Tennis Court', 10), 
('T2', 'Tennis Court', 10);

/* insert values into "bookings" table */
insert into bookings values
(1, 'AR', '2017-12-26', '13:00:00', 'oreillys', '2017-12-20 20:31:27', 'Paid'),
(2, 'MPF1', '2017-12-30', '17:00:00', 'noah51', '2017-12-22 05:22:10', 'Paid'),
(3, 'T2', '2017-12-31', '16:00:00', 'macejkovic73', '2017-12-28 18:14:23', 'Paid'),
(4, 'T1', '2018-03-05', '08:00:00', 'little31', '2018-02-22 20:19:17', 'Unpaid'),
(5, 'MPF2', '2018-03-02', '11:00:00', 'marvin1', '2018-03-01 16:13:45', 'Paid'),
(6, 'B1', '2018-03-28', '16:00:00', 'marvin1', '2018-03-23 22:46:36', 'Paid'),
(7, 'B1', '2018-04-15', '14:00:00', 'macejkovic73', '2018-04-12 22:23:20', 'Cancelled'),
(8, 'T2', '2018-04-23', '13:00:00', 'macejkovic73', '2018-04-19 10:49:00', 'Cancelled'),
(9, 'T1', '2018-05-25', '10:00:00', 'marvin1', '2018-05-21 11:20:46', 'Unpaid'),
(10, 'B2', '2018-06-12', '15:00:00', 'bbahringer', '2018-05-30 14:40:23', 'Paid');

/* creating views for booking details */
CREATE VIEW member_bookings AS
    SELECT 
        b.id,
        room_id,
        booked_date,
        booked_time,
        member_id,
        datetime_of_booking,
        payment_status,
        room_type,
        price
    FROM
        bookings AS b
            JOIN
        rooms AS r ON b.room_id = r.id order by b.id;

select * from member_bookings;

/* creation of procedures */
delimiter $$
create procedure insert_new_member (in p_id varchar(255), p_password varchar(255), in p_email varchar(255))
begin
insert into members(id, password, email) values(p_id, p_password, p_email);
end $$

create procedure delete_member (in p_id varchar(255))
begin
delete from members where id = p_id;
end $$

create procedure update_member_password (in p_id varchar(255), in p_password varchar(255))
begin
update members set password = p_password where id = p_id;
end $$

create procedure update_member_email (in p_id varchar(255), in p_email varchar(255))
begin
update members set email = p_email where id = p_id;
end $$

create procedure make_booking (in p_room_id varchar(255), in p_booked_date date, in p_booked_time time, p_member_id varchar(255))
begin
declare v_price decimal(10,2);
declare v_payment_due float;
select price into v_price from rooms where id = p_room_id;
insert into bookings(room_id, booked_date, booked_time, member_id) values(p_room_id, p_booked_date, p_booked_time, p_member_id);
select payment_due into v_payment_due from members where id = p_members_id;
update members set payment_due = v_payment_due + v_price where id = p_members_id;
end $$

create procedure update_payment (in p_id int)
begin
declare v_member_id varchar(255);
declare v_payment_due float;
declare v_price decimal(10,2);
update bookings set payment_status = 'Paid' where id = p_id;
select member_id, price into v_member_id, v_price from member_bookings where id = p_id;
select payment_due into v_payment_due from members where id = v_member_id;
update members set payment_due = v_payment_due - v_price where id = v_member_id;
end $$

create procedure view_bookings (in p_id int)
begin
select * from member_bookings where id = p_id;
end $$

create procedure search_room (in p_room_type varchar(255), in p_booked_date date, in p_booked_time time)
begin
SELECT 
    *
FROM
    rooms
WHERE
    id NOT IN (SELECT 
            room_id
        FROM
            bookings
        WHERE
            booked_date = p_booked_date
                AND booked_time = p_booked_time
                AND payment_status != 'Cancelled')
        AND room_type = p_room_type;
end $$

create procedure cancel_booking (in p_booking_id int, out p_message varchar(255))
begin
declare v_booked_date date;
declare v_cancellation int;
declare v_member_id varchar(255);
declare v_payment_status varchar(255);
declare v_price decimal(10,2);
declare v_payment_due float;
set v_cancellation = 0;
select member_id into v_member_id, booked_date into v_booked_date, price into v_price, payment_status into v_payment_status from member_bookings where id = p_booking_id;
SELECT 
    payment_due
INTO v_payment_due FROM
    members
WHERE
    id = v_member_id;
if curdate() >= v_booked_date then select "Cancellation cannot be done on/after the booked date" into p_message;
elseif v_payment_status = "Cancelled" or v_payment_status = "Paid" then select "Booking has already been cancelled or paid" into p_message;
else 
	update bookings set payment_status = "Cancelled" where id = p_booking_id;
UPDATE members 
SET 
    payment_due = v_payment_due - v_price
WHERE
    id = v_member_id;
    set v_payment_due = v_payment_due - v_price;
    set v_cancellation = check_cancellation(p_booking_id);
    if v_cancellation >= 2 then set v_payment_due = v_payment_due + 10;
    end if;
UPDATE members 
SET 
    payment_due = v_payment_due
WHERE
    id = v_member_id;
SELECT 'Booking Cancelled' INTO p_message;
end if;
end $$

create trigger payment_check before delete on members for each row
begin
declare v_payment_due float;
SELECT 
    payment_due
INTO v_payment_due FROM
    members
WHERE
    id = old.id;
if v_payment_due > 0 then insert into pending_terminations(id, email, payment_due) values(old.id, old.email, old.payment_due);
end if;
end $$

create function check_cancellation(p_booking_id int) returns int deterministic
begin
declare v_done int;
declare v_cancellation int;
declare v_current_payment_status varchar(255);
declare cur cursor for 
SELECT 
    member_id, payment_status
FROM
    bookings
WHERE
    member_id = (SELECT 
            member_id
        FROM
            bookings
        WHERE
            id = p_booking_id)
ORDER BY datetime_of_booking DESC;
declare continue handler for not found set v_done = 1;
set v_done = 0;
set v_cancellation = 0;
open cur;
cancellation_loop: loop
fetch cur into v_current_payment_status;
if v_current_payment_status != 'Cancelled' or v_done = 1 then leave cancellation_loop;
else set v_cancellation = v_cancellation + 1;
end if;
end loop;
close cur;
return v_cancellation;
end $$
delimiter ;
